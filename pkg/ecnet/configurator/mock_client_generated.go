// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/flomesh-io/ErieCanal/pkg/ecnet/configurator (interfaces: Configurator)

// Package configurator is a generated GoMock package.
package configurator

import (
	reflect "reflect"
	time "time"

	v1alpha1 "github.com/flomesh-io/ErieCanal/pkg/ecnet/apis/config/v1alpha1"
	trafficpolicy "github.com/flomesh-io/ErieCanal/pkg/ecnet/trafficpolicy"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigurator is a mock of Configurator interface.
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorMockRecorder
}

// MockConfiguratorMockRecorder is the mock recorder for MockConfigurator.
type MockConfiguratorMockRecorder struct {
	mock *MockConfigurator
}

// NewMockConfigurator creates a new mock instance.
func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &MockConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurator) EXPECT() *MockConfiguratorMockRecorder {
	return m.recorder
}

// GetConfigResyncInterval mocks base method.
func (m *MockConfigurator) GetConfigResyncInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigResyncInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConfigResyncInterval indicates an expected call of GetConfigResyncInterval.
func (mr *MockConfiguratorMockRecorder) GetConfigResyncInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigResyncInterval", reflect.TypeOf((*MockConfigurator)(nil).GetConfigResyncInterval))
}

// GetECNETNamespace mocks base method.
func (m *MockConfigurator) GetECNETNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECNETNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetECNETNamespace indicates an expected call of GetECNETNamespace.
func (mr *MockConfiguratorMockRecorder) GetECNETNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetECNETNamespace", reflect.TypeOf((*MockConfigurator)(nil).GetECNETNamespace))
}

// GetGlobalPluginChains mocks base method.
func (m *MockConfigurator) GetGlobalPluginChains() map[string][]trafficpolicy.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalPluginChains")
	ret0, _ := ret[0].(map[string][]trafficpolicy.Plugin)
	return ret0
}

// GetGlobalPluginChains indicates an expected call of GetGlobalPluginChains.
func (mr *MockConfiguratorMockRecorder) GetGlobalPluginChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalPluginChains", reflect.TypeOf((*MockConfigurator)(nil).GetGlobalPluginChains))
}

// GetLocalDNSProxyPrimaryUpstream mocks base method.
func (m *MockConfigurator) GetLocalDNSProxyPrimaryUpstream() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDNSProxyPrimaryUpstream")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalDNSProxyPrimaryUpstream indicates an expected call of GetLocalDNSProxyPrimaryUpstream.
func (mr *MockConfiguratorMockRecorder) GetLocalDNSProxyPrimaryUpstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDNSProxyPrimaryUpstream", reflect.TypeOf((*MockConfigurator)(nil).GetLocalDNSProxyPrimaryUpstream))
}

// GetLocalDNSProxySecondaryUpstream mocks base method.
func (m *MockConfigurator) GetLocalDNSProxySecondaryUpstream() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDNSProxySecondaryUpstream")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalDNSProxySecondaryUpstream indicates an expected call of GetLocalDNSProxySecondaryUpstream.
func (mr *MockConfiguratorMockRecorder) GetLocalDNSProxySecondaryUpstream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDNSProxySecondaryUpstream", reflect.TypeOf((*MockConfigurator)(nil).GetLocalDNSProxySecondaryUpstream))
}

// GetMeshConfig mocks base method.
func (m *MockConfigurator) GetMeshConfig() v1alpha1.MeshConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshConfig")
	ret0, _ := ret[0].(v1alpha1.MeshConfig)
	return ret0
}

// GetMeshConfig indicates an expected call of GetMeshConfig.
func (mr *MockConfiguratorMockRecorder) GetMeshConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshConfig", reflect.TypeOf((*MockConfigurator)(nil).GetMeshConfig))
}

// GetMeshConfigJSON mocks base method.
func (m *MockConfigurator) GetMeshConfigJSON() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshConfigJSON")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshConfigJSON indicates an expected call of GetMeshConfigJSON.
func (mr *MockConfiguratorMockRecorder) GetMeshConfigJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshConfigJSON", reflect.TypeOf((*MockConfigurator)(nil).GetMeshConfigJSON))
}

// GetProxyServerPort mocks base method.
func (m *MockConfigurator) GetProxyServerPort() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxyServerPort")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetProxyServerPort indicates an expected call of GetProxyServerPort.
func (mr *MockConfiguratorMockRecorder) GetProxyServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxyServerPort", reflect.TypeOf((*MockConfigurator)(nil).GetProxyServerPort))
}

// GetRepoServerCodebase mocks base method.
func (m *MockConfigurator) GetRepoServerCodebase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoServerCodebase")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoServerCodebase indicates an expected call of GetRepoServerCodebase.
func (mr *MockConfiguratorMockRecorder) GetRepoServerCodebase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoServerCodebase", reflect.TypeOf((*MockConfigurator)(nil).GetRepoServerCodebase))
}

// GetRepoServerIPAddr mocks base method.
func (m *MockConfigurator) GetRepoServerIPAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoServerIPAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoServerIPAddr indicates an expected call of GetRepoServerIPAddr.
func (mr *MockConfiguratorMockRecorder) GetRepoServerIPAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoServerIPAddr", reflect.TypeOf((*MockConfigurator)(nil).GetRepoServerIPAddr))
}

// GetSidecarClass mocks base method.
func (m *MockConfigurator) GetSidecarClass() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSidecarClass")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSidecarClass indicates an expected call of GetSidecarClass.
func (mr *MockConfiguratorMockRecorder) GetSidecarClass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidecarClass", reflect.TypeOf((*MockConfigurator)(nil).GetSidecarClass))
}

// GetSidecarImage mocks base method.
func (m *MockConfigurator) GetSidecarImage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSidecarImage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSidecarImage indicates an expected call of GetSidecarImage.
func (mr *MockConfiguratorMockRecorder) GetSidecarImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidecarImage", reflect.TypeOf((*MockConfigurator)(nil).GetSidecarImage))
}

// GetSidecarLogLevel mocks base method.
func (m *MockConfigurator) GetSidecarLogLevel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSidecarLogLevel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSidecarLogLevel indicates an expected call of GetSidecarLogLevel.
func (mr *MockConfiguratorMockRecorder) GetSidecarLogLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSidecarLogLevel", reflect.TypeOf((*MockConfigurator)(nil).GetSidecarLogLevel))
}

// LocalDNSProxyEnabled mocks base method.
func (m *MockConfigurator) LocalDNSProxyEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalDNSProxyEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LocalDNSProxyEnabled indicates an expected call of LocalDNSProxyEnabled.
func (mr *MockConfiguratorMockRecorder) LocalDNSProxyEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDNSProxyEnabled", reflect.TypeOf((*MockConfigurator)(nil).LocalDNSProxyEnabled))
}
