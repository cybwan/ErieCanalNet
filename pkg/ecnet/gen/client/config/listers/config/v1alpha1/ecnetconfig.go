/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/flomesh-io/ErieCanal/pkg/ecnet/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EcnetConfigLister helps list EcnetConfigs.
// All objects returned here must be treated as read-only.
type EcnetConfigLister interface {
	// List lists all EcnetConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcnetConfig, err error)
	// EcnetConfigs returns an object that can list and get EcnetConfigs.
	EcnetConfigs(namespace string) EcnetConfigNamespaceLister
	EcnetConfigListerExpansion
}

// ecnetConfigLister implements the EcnetConfigLister interface.
type ecnetConfigLister struct {
	indexer cache.Indexer
}

// NewEcnetConfigLister returns a new EcnetConfigLister.
func NewEcnetConfigLister(indexer cache.Indexer) EcnetConfigLister {
	return &ecnetConfigLister{indexer: indexer}
}

// List lists all EcnetConfigs in the indexer.
func (s *ecnetConfigLister) List(selector labels.Selector) (ret []*v1alpha1.EcnetConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcnetConfig))
	})
	return ret, err
}

// EcnetConfigs returns an object that can list and get EcnetConfigs.
func (s *ecnetConfigLister) EcnetConfigs(namespace string) EcnetConfigNamespaceLister {
	return ecnetConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EcnetConfigNamespaceLister helps list and get EcnetConfigs.
// All objects returned here must be treated as read-only.
type EcnetConfigNamespaceLister interface {
	// List lists all EcnetConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EcnetConfig, err error)
	// Get retrieves the EcnetConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EcnetConfig, error)
	EcnetConfigNamespaceListerExpansion
}

// ecnetConfigNamespaceLister implements the EcnetConfigNamespaceLister
// interface.
type ecnetConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EcnetConfigs in the indexer for a given namespace.
func (s ecnetConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EcnetConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EcnetConfig))
	})
	return ret, err
}

// Get retrieves the EcnetConfig from the indexer for a given namespace and name.
func (s ecnetConfigNamespaceLister) Get(name string) (*v1alpha1.EcnetConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecnetconfig"), name)
	}
	return obj.(*v1alpha1.EcnetConfig), nil
}
